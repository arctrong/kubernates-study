<!--METADATA {"title": "Minikube and kubectl installation"} -->

[[BACK](index.html)] | [[NEXT](practice.html)]

----------------------------------------------------------------------------------------------------
[TOC]

----------------------------------------------------------------------------------------------------
_Jul 2, 2021_

# Minikube installation

[38:58](https://youtu.be/X48VuDVv0do?t=2338) Here we are not going to follow the instructions in 
the video.

Minikube [home page](https://minikube.sigs.k8s.io/docs/).    
Minikube [installation instructions](https://minikube.sigs.k8s.io/docs/start/).

> __Note.__ In non-Linux environments a virtualization system (like VirtualBox) is required. Here
> we don't need it since we are working in a real Ubuntu Linux.


## Installation

The environment:

````shell
$ uname -a
Linux myhost 5.4.0-70-generic #78~18.04.1-Ubuntu SMP Sat Mar 20 14:10:07 UTC 2021 x86_64 x86_64 x86_64 GNU/Linux
````

Using the Linux distributive independent method.

> __Note.__ With distributive specific installation (Debian package in this case), `kubectl` tool
> must probably be installed automatically. But now we are going to later install it separately.

````shell
$ curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64

$ du -h minikube-linux-amd64
62M     minikube-linux-amd64

$ sudo install minikube-linux-amd64 /usr/local/bin/minikube
````


## Checking and testing

````shell
$ which minikube
/usr/local/bin/minikube

$ minikube version
minikube version: v1.21.0
commit: 76d74191d82c47883dc7e1319ef7cebd3e00ee11
````


## First start

> In non-Linux environment `--vm-driver` parameter must be used.

````shell
$ minikube start
* minikube v1.21.0 on Ubuntu 18.04
* Automatically selected the docker driver. Other choices: none, ssh
* Starting control plane node minikube in cluster minikube
* Pulling base image ...
* Downloading Kubernetes v1.20.7 preload ...
    > preloaded-images-k8s-v11-v1...: 492.20 MiB / 492.20 MiB  100.00% 6.05 MiB
    > gcr.io/k8s-minikube/kicbase...: 359.09 MiB / 359.09 MiB  100.00% 3.97 MiB
* Creating docker container (CPUs=2, Memory=2200MB) ...
* Preparing Kubernetes v1.20.7 on Docker 20.10.7 ...
  - Generating certificates and keys ...
  - Booting up control plane ...
  - Configuring RBAC rules ...
* Verifying Kubernetes components...
  - Using image gcr.io/k8s-minikube/storage-provisioner:v5
* Enabled addons: storage-provisioner, default-storageclass
* kubectl not found. If you need it, try: 'minikube kubectl -- get pods -A'
* Done! kubectl is now configured to use "minikube" cluster and "default" namespace by default
````

> The existing Docker version is:
> 
> ````shell
> $ docker --version
> Docker version 20.10.5, build 55c4c88
> ````
> 
> So looks like `minikube` uses its own Docker container runtime.

````shell
$ kubectl get po -A
-bash: kubectl: command not found
````

`kubectl` will be installed later. Now need to use the less convenient syntax:

````shell
$ minikube kubectl -- get po -A
    > kubectl.sha256: 64 B / 64 B [--------------------------] 100.00% ? p/s 0s
    > kubectl: 38.36 MiB / 38.36 MiB [-------------] 100.00% 10.81 MiB p/s 3.8s
NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE
kube-system   coredns-74ff55c5b-bp46q            1/1     Running   0          6m23s
kube-system   etcd-minikube                      1/1     Running   0          6m29s
kube-system   kube-apiserver-minikube            1/1     Running   0          6m29s
kube-system   kube-controller-manager-minikube   1/1     Running   0          6m29s
kube-system   kube-proxy-h6r7v                   1/1     Running   0          6m23s
kube-system   kube-scheduler-minikube            1/1     Running   0          6m29s
kube-system   storage-provisioner                1/1     Running   0          6m34s
````

That's probably it. The cluster may be used.

> We need the cluster running for the following steps. The command to stop it is `minikube stop`.

----------------------------------------------------------------------------------------------------
# `kubectl` installation

K8s doc: [`kubectl` overview](https://kubernetes.io/docs/reference/kubectl/overview/) |
[Install and Set Up kubectl on Linux](https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/).


## Installation

Using the Linux distributive independent method:

````shell
$ curl -L -s https://dl.k8s.io/release/stable.txt && echo
v1.21.2
````

In the following commands insert the version (`v1.21.2` in this case) instead of `<version>`.

````shell
$ curl -LO "https://dl.k8s.io/release/<version>/bin/linux/amd64/kubectl"

$ curl -LO "https://dl.k8s.io/<version>/bin/linux/amd64/kubectl.sha256"

$ echo "$(<kubectl.sha256) kubectl" | sha256sum --check
kubectl: OK

$ sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
````


## Checking and testing

````shell
$ which kubectl
/usr/local/bin/kubectl

$ kubectl version --short=true
Client Version: v1.21.2
Server Version: v1.20.7
````

----------------------------------------------------------------------------------------------------
# Trying minikube Dashboard

> This step is not necessary. The Dashboard may be a convenient administration tool but we are
> going to use command line in the course.

````shell
$ minikube dashboard
.  .  .
* Opening http://127.0.0.1:46867/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/ in your default browser...
.  .  .
Error: cannot open display: localhost:10.0
````

This works if executed on the Ubuntu host directly. The link is automatically opened in the 
browser. Need some extra hops to access from the other machine. According to this
[Stackoverflow answer](https://stackoverflow.com/a/53830578), in the first remote terminal
window run:

````shell
$ kubectl proxy --address='0.0.0.0' --disable-filter=true
````

In the second remote terminal window run:

````shell
$ hostname -I
192.168.1.500 ...

$ minikube dashboard --url=true
* Verifying dashboard health ...
* Launching proxy ...
* Verifying proxy health ...
http://127.0.0.1:39465/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/
````

Then in a browser on a remote machine open:
<http://192.168.1.500:8001/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy/>.

The interface must look like this:

![](pict/minikube_dashboard.png)

Press `Ctrl`+`C` to stop the processes in the terminal windows.

----------------------------------------------------------------------------------------------------
[[BACK](index.html)] | [[NEXT](practice.html)]

----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------
